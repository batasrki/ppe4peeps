// Code generated by github.com/actgardner/gogen-avro/v7. DO NOT EDIT.
/*
 * SOURCE:
 *     order_received.avsc
 */
package avro

import (
	"github.com/actgardner/gogen-avro/v7/compiler"
	"github.com/actgardner/gogen-avro/v7/vm"
	"github.com/actgardner/gogen-avro/v7/vm/types"
	"io"
)

type Information struct {
	FirstName string `json:"firstName"`

	LastName string `json:"lastName"`

	Email string `json:"email"`

	ShippingAddress *AddressLines `json:"shippingAddress"`
}

const InformationAvroCRC64Fingerprint = "\x95\x9c× `6\x17o"

func NewInformation() *Information {
	return &Information{}
}

func DeserializeInformation(r io.Reader) (*Information, error) {
	t := NewInformation()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func DeserializeInformationFromSchema(r io.Reader, schema string) (*Information, error) {
	t := NewInformation()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return nil, err
	}

	err = vm.Eval(r, deser, t)
	if err != nil {
		return nil, err
	}
	return t, err
}

func writeInformation(r *Information, w io.Writer) error {
	var err error
	err = vm.WriteString(r.FirstName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.LastName, w)
	if err != nil {
		return err
	}
	err = vm.WriteString(r.Email, w)
	if err != nil {
		return err
	}
	err = writeAddressLines(r.ShippingAddress, w)
	if err != nil {
		return err
	}
	return err
}

func (r *Information) Serialize(w io.Writer) error {
	return writeInformation(r, w)
}

func (r *Information) Schema() string {
	return "{\"fields\":[{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"email\",\"type\":\"string\"},{\"name\":\"shippingAddress\",\"type\":{\"fields\":[{\"name\":\"address\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"stateProvince\",\"type\":\"string\"},{\"name\":\"postalCode\",\"type\":\"string\"}],\"name\":\"addressLines\",\"type\":\"record\"}}],\"name\":\"information\",\"type\":\"record\"}"
}

func (r *Information) SchemaName() string {
	return "information"
}

func (_ *Information) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ *Information) SetInt(v int32)       { panic("Unsupported operation") }
func (_ *Information) SetLong(v int64)      { panic("Unsupported operation") }
func (_ *Information) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ *Information) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ *Information) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ *Information) SetString(v string)   { panic("Unsupported operation") }
func (_ *Information) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *Information) Get(i int) types.Field {
	switch i {
	case 0:
		return &types.String{Target: &r.FirstName}
	case 1:
		return &types.String{Target: &r.LastName}
	case 2:
		return &types.String{Target: &r.Email}
	case 3:
		r.ShippingAddress = NewAddressLines()

		return r.ShippingAddress
	}
	panic("Unknown field index")
}

func (r *Information) SetDefault(i int) {
	switch i {
	}
	panic("Unknown field index")
}

func (r *Information) NullField(i int) {
	switch i {
	}
	panic("Not a nullable field index")
}

func (_ *Information) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *Information) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ *Information) Finalize()                        {}

func (_ *Information) AvroCRC64Fingerprint() []byte {
	return []byte(InformationAvroCRC64Fingerprint)
}
